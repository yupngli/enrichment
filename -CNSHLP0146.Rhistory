predprob(16,23,40,0.6,0.4,0.6,0.9)
predprobCpp(16,23,40,0.6,0.4,0.6,0.9)
predprobCpp(16,23,40,0.6,0.4,0.6,0.9)
install.packages("ph2bye")
library(ph2bye)
lchoose(4,1)
log(4)
Rcpp::sourceCpp("序贯富集_多阶段序贯设计/ph2bayes.cpp")
Rcpp::sourceCpp("序贯富集_多阶段序贯设计/ph2bayes.cpp")
Rcpp::sourceCpp("序贯富集_多阶段序贯设计/ph2bayes.cpp")
Rcpp::sourceCpp("序贯富集_多阶段序贯设计/ph2bayes.cpp")
sourceCpp('ph2bayes.cpp')
sourceCpp('序贯富集_多阶段序贯设计/ph2bayes.cpp')
sourceCpp('序贯富集_多阶段序贯设计/ph2bayes.cpp')
sourceCpp('序贯富集_多阶段序贯设计/ph2bayes.cpp')
View(predprobMedian)
sourceCpp('序贯富集_多阶段序贯设计/predprobMedian.cpp')
sourceCpp('序贯富集_多阶段序贯设计/predprobPosterior.cpp')
library(dplyr)
library(ggplot2)
library(Rcpp)
start_time <- Sys.time()
#-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# 0: 导入计算后验的c++外部函数
#-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
sourceCpp('function_cpp.cpp')
sourceCpp('序贯富集_多阶段序贯设计/predprobMedian.cpp')
sourceCpp('序贯富集_多阶段序贯设计/predprobPosterior.cpp')
#-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# 主程序1: 寻找决策边界
#-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
nv = 0.16
statsig = 0.975
clinicalsig = 0.75
postmed = 0.24
positivestatsig = 0.95
maxsamplesize = 60 #我们能接受的样本量的上限，但是设太低可能会找不到
samplesize_start = 30 #实际应用中，总不可能样本量从1开始的
maxresponse = 15 #实际应用中可能出现的最高的responders数量?
beta_a = 0.1904762 #先验变化会对minimum sample size有影响，就算是无信息先验
beta_b = 1
totalrow = (maxsamplesize-samplesize_start+1)*(maxresponse)
df <- as.data.frame(responsegate(maxresponse = maxresponse,
samplesizestart = samplesize_start,
maxsamplesize = maxsamplesize,
a = beta_a,
b = beta_b,
nv = nv,
positivestatsig = positivestatsig,
statsig = statsig,
postmed = postmed))
colnames(df) <- c("r","n","significance","postmedian","justmedfl","bothfl","tripfl","group")
# 删去不满足任何标准的行记录
df_cc <- filter(df,justmedfl==1 | bothfl==1 | tripfl==1)
# recode
df_cc <- df_cc %>%
mutate(group=recode(group,'2'="full",'3'="positive only",'4'="n/a"))
## 最小样本量逻辑：按照n分组，找到最小的那个significance，因为一旦满足当前的要求，
## 则对于这个n，比当前significance对应的r更大的r，它的significance肯定更高
df_cc_plot <- df_cc %>%
group_by(n) %>%
slice(which.min(significance))
View(df_cc_plot)
n <- 50
succvec <- rep(NA,15)
n <- 36
succvec <- rep(NA,15)
for (r in 1:15){
rand <- rbeta(100000,0.2+r,0.8+n-r)
sig <- mean(rand>=0.2)
succvec[r] <- sig
}
succvec
n <- 50
succvec <- rep(NA,15)
for (r in 1:15){
rand <- rbeta(100000,0.2+r,0.8+n-r)
sig <- mean(rand>=0.2)
med <- median(rand)
succvec[r] <- med
}
succvec
n <- 50
succvec <- rep(NA,15)
for (r in 1:15){
rand <- rbeta(100000,0.2+r,0.8+n-r)
sig <- mean(rand>=0.2)
med <- median(rand)
succvec[r] <- med
}
succvec
n <- 50
succvec <- rep(NA,15)
for (r in 1:15){
sig <- predprobMedian(r,n,n,0.1904762,1,0.24)
succvec[r] <- sig
}
succvec
n <- 50
succvec <- rep(NA,15)
for (r in 1:15){
sig <- predprobMedian(r,n,100,0.1904762,1,0.24)
succvec[r] <- sig
}
succvec
succvec>=0.1
succvec2 <- rep(NA,15)
for (r in 1:15){
sig <- predprobPosterior(r,20,40,0.1904762,1,0.16,0.75)
succvec2[r] <- sig
}
succvec2
succvec2>=0.1
succvec3 <- rep(NA,15)
for (r in 1:15){
sig <- predprobMedian(r,30,60,0.1904762,1,0.24)
succvec3[r] <- sig
}
succvec3
succvec3>=0.1
max_responders <- 30
seq(1,max_responders,1)
library(dplyr)
library(ggplot2)
library(Rcpp)
start_time <- Sys.time()
#-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# 0: 导入计算后验的c++外部函数
#-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
sourceCpp('function_cpp.cpp')
sourceCpp('序贯富集_多阶段序贯设计/predprobMedian.cpp')
sourceCpp('序贯富集_多阶段序贯设计/predprobPosterior.cpp')
#-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# 主程序1: 寻找决策边界
#-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# 先验
beta_a = 0.1904762 #先验变化会对minimum sample size有影响，就算是无信息先验
beta_b = 1
# 双标准决策中的边界
postmed = 0.24
nv = 0.16
clinicalsig = 0.75
# 搜索的responders上限
max_responders <- 30
# 第一阶段full人群的样本量和final阶段full人群样本量,用来算PP
full_n1 <- 50
full_n_total <- 100
# 第一阶段Y+人群的样本量和final阶段Y+人群样本量,用来算PP
y_plus_n1 <- 30
y_plus_n_total <- 60
# 第一阶段Y-人群的样本量和final阶段Y-人群样本量,用来算PP
y_minus_n1 <- 20
y_minus_n_total <- 40
# 设置向量来收集full/Y+/Y-在期中的时候PP的结果
r_vec <- seq(1,max_responders,1)
full_succ_vec <- rep(NA,max_responders)
y_minus_succ_vec <- rep(NA,max_responders)
y_plus_succ_vec <- rep(NA,max_responders)
for (r in 0:max_responders){
full_pp <- predprobMedian(r,full_n1,full_n_total,beta_a,beta_b,postmed)
y_minus_pp <- predprobPosterior(r,y_minus_n1,y_minus_n_total,beta_a,beta_b,nv,clinicalsig)
y_plus_pp <- predprobMedian(r,y_plus_n1,y_plus_n_total,beta_a,beta_b,postmed)
# collect result
full_succ_vec[r] <- full_pp
y_minus_succ_vec[r] <- y_minus_pp
y_plus_succ_vec[r] <- y_plus_pp
# package result
result_df <- data.frame(r=r_vec,
fullpp=full_succ_vec,
yminuspp=y_minus_succ_vec,
ypluspp=y_plus_succ_vec)
}
View(result_df)
install.packages("reshape2")
library(reshape2)
result_df_t <- melt(result_df,id.vars = "r",variable.name = "population_pp")
View(result_df_t)
result_df_t <- result_df_t %>% filter(!is.na(value))
View(result_df_t)
ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp)), shape=factor(population_pp)), size = 2)
ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2)
clinicalsig = 0.75
pp_thres = 0.1
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange") +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange") +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
labs(color="Group") +
theme_classic()
p
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange") +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange") +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
labs(color="Group",shape="Group") +
theme_classic()
p
ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange") +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange") +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(breaks = seq(1,max_responders,1))
labs(color="Group",shape="Group") +
theme_classic()
p
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange") +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange") +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(breaks = seq(1,max_responders,1))
labs(color="Group",shape="Group") +
theme_classic()
p
ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange") +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange") +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(breaks = seq(1,max_responders,1))
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.grid.major.x = element_line(colour = "grey50"))
ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange") +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange") +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.grid.major.x = element_line(colour = "grey50"))
ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange") +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange") +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "dashed", fill = NA),
panel.grid.major.x = element_line(colour = "grey50"))
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange") +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange") +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "dashed", fill = NA),
panel.grid.major.x = element_line(colour = "grey50",linetype = "dashed"))
p
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange") +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange") +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "solid", fill = NA),
panel.grid.major.x = element_line(colour = "grey30",linetype = "dashed"))
p
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange") +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange") +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "solid", fill = NA),
panel.grid.major.x = element_line(colour = "grey70",linetype = "dashed"))
p
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange") +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange") +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(name="#responders",breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "solid", fill = NA),
panel.grid.major.x = element_line(colour = "grey70",linetype = "dashed"))
p
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dashed", color = "orange",lwd=2) +
geom_hline(yintercept=pp_thres, linetype="dashed", color = "orange",lwd=2) +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(name="#responders",breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "solid", fill = NA),
panel.grid.major.x = element_line(colour = "grey70",linetype = "dashed"))
p
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dotted", color = "orange",lwd=1) +
geom_hline(yintercept=pp_thres, linetype="dotted", color = "orange",lwd=1) +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(name="#responders",breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "solid", fill = NA),
panel.grid.major.x = element_line(colour = "grey70",linetype = "dashed"))
p
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dotted", color = "orange",lwd=1) +
geom_hline(yintercept=pp_thres, linetype="dotted", color = "orange",lwd=1) +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(name="#responders",breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "solid", fill = NA),
panel.grid.major.x = element_line(colour = "grey70",linetype = "longdashed"))
p
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 2) +
geom_hline(yintercept=clinicalsig, linetype="dotted", color = "orange",lwd=1) +
geom_hline(yintercept=pp_thres, linetype="dotted", color = "orange",lwd=1) +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(name="#responders",breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "solid", fill = NA),
panel.grid.major.x = element_line(colour = "grey70",linetype = "longdash"))
p
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 3) +
geom_hline(yintercept=clinicalsig, linetype="dotted", color = "orange",lwd=1) +
geom_hline(yintercept=pp_thres, linetype="dotted", color = "orange",lwd=1) +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(name="#responders",breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "solid", fill = NA),
panel.grid.major.x = element_line(colour = "grey70",linetype = "longdash"))
p
result_df_t_decision <- result_df_t %>%
mutate(gt10=ifelse(value>0.1,TRUE,FALSE),
gt75=ifelse(value>0.1,TRUE,FALSE))
View(result_df_t_decision)
result_df_t_decision %>%
filter(population_pp %in% c("fullpp","yminuspp") & value >= 0.1)
result_df_t_decision %>%
filter(population_pp %in% c("fullpp","yminuspp") & value >= 0.1) %>%
group_by(population_pp) %>%
slice(which.min(r))
F_dec <- result_df_t_decision %>%
filter(population_pp %in% c("fullpp","yminuspp") & value >= 0.1) %>%
group_by(population_pp) %>%
slice(which.min(r))
cat("The Go decision for full population is responders >= ",max(F_dec$r))
p
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 3) +
geom_hline(yintercept=clinicalsig, linetype="dotted", color = "orange",lwd=1) +
geom_hline(yintercept=pp_thres, linetype="dotted", color = "orange",lwd=1) +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(name="#responders",breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "solid", fill = NA),
panel.grid.major.x = element_line(colour = "grey70",linetype = "longdash"))
p
View(result_df)
View(result_df)
# 先验
beta_a = 0.1904762 #先验变化会对minimum sample size有影响，就算是无信息先验
beta_b = 1
# 双标准决策中的边界
postmed = 0.24
nv = 0.16
clinicalsig = 0.75
pp_thres = 0.1
# 搜索的responders上限
max_responders <- 20
# 第一阶段full人群的样本量和final阶段full人群样本量,用来算PP
full_n1 <- 50
full_n_total <- 100
# 第一阶段Y+人群的样本量和final阶段Y+人群样本量,用来算PP
y_plus_n1 <- 30
y_plus_n_total <- 60
# 第一阶段Y-人群的样本量和final阶段Y-人群样本量,用来算PP
y_minus_n1 <- 20
y_minus_n_total <- 40
# 设置向量来收集full/Y+/Y-在期中的时候PP的结果
r_vec <- seq(1,max_responders,1)
full_succ_vec <- rep(NA,max_responders)
y_minus_succ_vec <- rep(NA,max_responders)
y_plus_succ_vec <- rep(NA,max_responders)
for (r in 0:max_responders){
full_pp <- predprobMedian(r,full_n1,full_n_total,beta_a,beta_b,postmed)
y_minus_pp <- predprobPosterior(r,y_minus_n1,y_minus_n_total,beta_a,beta_b,nv,clinicalsig)
y_plus_pp <- predprobMedian(r,y_plus_n1,y_plus_n_total,beta_a,beta_b,postmed)
# collect result
full_succ_vec[r] <- full_pp
y_minus_succ_vec[r] <- y_minus_pp
y_plus_succ_vec[r] <- y_plus_pp
# package result
result_df <- data.frame(r=r_vec,
fullpp=full_succ_vec,
yminuspp=y_minus_succ_vec,
ypluspp=y_plus_succ_vec)
}
result_df_t <- melt(result_df,id.vars = "r",variable.name = "population_pp")
result_df_t <- result_df_t %>% filter(!is.na(value))
p <- ggplot(data=result_df_t, mapping = aes(x=r,y=value)) +
geom_point(aes(color = factor(population_pp), shape=factor(population_pp)), size = 3) +
geom_hline(yintercept=clinicalsig, linetype="dotted", color = "orange",lwd=1) +
geom_hline(yintercept=pp_thres, linetype="dotted", color = "orange",lwd=1) +
# geom_vline(xintercept=58, linetype="dashed", color = "black") +
# geom_vline(xintercept=87, linetype="dashed", color = "black") +
scale_y_continuous(name="Predictive Probability")+
scale_x_continuous(name="#responders",breaks = seq(1,max_responders,1))+
labs(color="Group",shape="Group") +
theme(panel.background = element_rect(fill = NA),
panel.border = element_rect(linetype = "solid", fill = NA),
panel.grid.major.x = element_line(colour = "grey70",linetype = "longdash"))
p
# 打印决策边界
result_df_t_decision <- result_df_t %>%
mutate(gt10=ifelse(value>0.1,TRUE,FALSE),
gt75=ifelse(value>0.1,TRUE,FALSE))
### Continue with F:POS(F) ≥ 10% and POS(Y-) ≥ 10%,能同时满足这两个条件
### 从上面的图中可以看出，当full人群的中期条件满足（50人里观察到10个full人群responders）,此时去检查y-人群，responders>=3时可以满足Full期中的决策边界
F_dec <- result_df_t_decision %>%
filter(population_pp %in% c("fullpp","yminuspp") & value >= 0.1) %>%
group_by(population_pp) %>%
slice(which.min(r))
F_dec_r <- max(F_dec$r)
cat("The Go decision for full population is responders >= ",F_dec_r)
y_plus_dec <- result_df %>%
mutate(cond1 = ifelse(fullpp>=0.1 & yminuspp<0.1 & ypluspp>=0.1,TRUE,FALSE),
cond2 = ifelse(fullpp<0.1 & ypluspp>=0.1,TRUE,FALSE),
overall = cond1 | cond2)
View(y_plus_dec)
y_plus_dec %>%
filter(overall == TRUE) %>%
slice(which.min(r))
y_plus_dec2 <- y_plus_dec %>%
filter(overall == TRUE) %>%
slice(which.min(r))
y_plus_dec_r <- max(y_plus_dec2$r)
cat("The Go decision for Y+ population is responders >= ",y_plus_dec_r)
rep=5000
simmat <- data.frame(orr_plus=rep(NA,rep),
orr_minus=rep(NA,rep),
allcomers_s1=rep(NA,rep),
y_plus_s1=rep(NA,rep),
y_minus_s1=rep(NA,rep),
allcomers_s2=rep(NA,rep),
y_plus_s2=rep(NA,rep),
y_minus_s2=rep(NA,rep),
full_gate_s1=rep(NA,rep),
y_plus_gate_s1=rep(NA,rep),
y_minus_gate_s1=rep(NA,rep),
full_gate_s2=rep(NA,rep),
y_plus_gate_s2=rep(NA,rep),
y_minus_gate_s2=rep(NA,rep),
y_plus_responders_s1=rep(NA,rep),
full_responders_s1=rep(NA,rep),
y_plus_responders_overall=rep(NA,rep),
full_responders_overall=rep(NA,rep),
succ_ia_full=rep(FALSE,rep),
succ_ia_y_pos=rep(FALSE,rep),
early_stop=rep(FALSE,rep),
succ_overall_full=rep(FALSE,rep),
succ_overall_y_pos=rep(FALSE,rep))
View(simmat)
